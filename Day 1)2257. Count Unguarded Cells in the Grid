from typing import List

class Solution:
    def countUnguarded(self, m: int, n: int, guards: List[List[int]], walls: List[List[int]]) -> int:
        # Initialize the grid
        grid = [[0] * n for _ in range(m)]
        
        # Mark guards and walls on the grid
        for row, col in guards:
            grid[row][col] = 1  # Guard: 1
        for row, col in walls:
            grid[row][col] = 2  # Wall: 2

        # Directions: North, East, South, West
        directions = [(-1, 0), (0, 1), (1, 0), (0, -1)]

        # Mark cells guarded by guards
        for row, col in guards:
            for dr, dc in directions:
                r, c = row + dr, col + dc
                while 0 <= r < m and 0 <= c < n:
                    if grid[r][c] == 1 or grid[r][c] == 2:  # Stop at guard or wall
                        break
                    if grid[r][c] == 0:  # Mark as guarded if unoccupied
                        grid[r][c] = 3
                    r, c = r + dr, c + dc

        # Count unoccupied and unguarded cells
        unguarded_count = 0
        for row in range(m):
            for col in range(n):
                if grid[row][col] == 0:  # Unoccupied and unguarded
                    unguarded_count += 1

        return unguarded_count
