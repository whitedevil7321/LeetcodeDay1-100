import heapq
from typing import List

class Solution:
    def minimumObstacles(self, grid: List[List[int]]) -> int:
        m, n = len(grid), len(grid[0])
        
        # Directions for moving up, down, left, right
        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]
        
        # Min-heap (priority queue) for BFS
        pq = [(0, 0, 0)]  # (obstacles removed, x, y)
        
        # Visited array to track the minimum obstacles removed to reach each cell
        visited = [[float('inf')] * n for _ in range(m)]
        visited[0][0] = 0
        
        while pq:
            obstacles_removed, x, y = heapq.heappop(pq)
            
            # If we reached the bottom-right corner, return the result
            if x == m - 1 and y == n - 1:
                return obstacles_removed
            
            # Explore the neighbors
            for dx, dy in directions:
                nx, ny = x + dx, y + dy
                
                # Check if the new position is within bounds
                if 0 <= nx < m and 0 <= ny < n:
                    new_obstacles_removed = obstacles_removed + grid[nx][ny]
                    
                    # If we found a path with fewer obstacles removed, update and push to the heap
                    if new_obstacles_removed < visited[nx][ny]:
                        visited[nx][ny] = new_obstacles_removed
                        heapq.heappush(pq, (new_obstacles_removed, nx, ny))
        
        # If no path is found (which shouldn't happen according to the problem constraints)
        return -1
